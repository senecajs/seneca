/// <reference types="node" />
declare function wrap(this: any, pin: any, actdef: any, wrapper: any): any;
declare function fix(this: any, patargs: any, msgargs: any, custom: any): any;
declare function options(this: any, options: any, chain: any): any;
declare function close(callpoint: any): (this: any, done: any) => any;
declare function toString(this: any): any;
declare function seneca(this: any): any;
declare function explain(this: any, toggle: any): any;
declare function error(this: any, first: any): any;
declare function fail(this: any, ...args: any[]): any;
declare function inward(this: any): any;
declare function outward(this: any): any;
declare function delegate(this: any, fixedargs: any, fixedmeta: any): any;
declare function depends(this: any): void;
declare function export$(this: any, key: any): any;
declare function quiet(this: any, flags: any): any;
declare function test(this: any, errhandler: any, logspec: any): any;
declare function ping(this: any): {
    now: number;
    uptime: number;
    id: any;
    cpu: NodeJS.CpuUsage;
    mem: NodeJS.MemoryUsage;
    act: any;
    tr: any;
};
declare function translate(this: any, from_in: any, to_in: any, pick_in?: any, flags?: {
    add?: boolean;
}): any;
declare function gate(this: any): any;
declare function ungate(this: any): any;
declare function list_plugins(this: any): any;
declare function find_plugin(this: any, plugindesc: any, tag: any): any;
declare function has_plugin(this: any, plugindesc: any, tag: any): boolean;
declare function ignore_plugin(this: any, plugindesc: any, tag: any, ignore: any): any;
declare function find(this: any, pattern: any, flags: any): any;
declare function has(this: any, pattern: any): boolean;
declare function list(this: any, pattern: any): any;
declare function status(this: any, flags: any): {
    stats: any;
    history: any;
    transport: any;
};
declare function reply(this: any, spec: any): boolean;
declare function listen(this: any, callpoint: any): (this: any, ...argsarr: any[]) => any;
declare function client(this: any, callpoint: any): (this: any) => any;
declare function decorate(this: any): void;
declare let API: {
    wrap: typeof wrap;
    fix: typeof fix;
    options: typeof options;
    close: typeof close;
    toString: typeof toString;
    seneca: typeof seneca;
    explain: typeof explain;
    error: typeof error;
    fail: typeof fail;
    inward: typeof inward;
    outward: typeof outward;
    delegate: typeof delegate;
    depends: typeof depends;
    export: typeof export$;
    quiet: typeof quiet;
    test: typeof test;
    ping: typeof ping;
    translate: typeof translate;
    gate: typeof gate;
    ungate: typeof ungate;
    list_plugins: typeof list_plugins;
    find_plugin: typeof find_plugin;
    has_plugin: typeof has_plugin;
    ignore_plugin: typeof ignore_plugin;
    find: typeof find;
    has: typeof has;
    list: typeof list;
    status: typeof status;
    reply: typeof reply;
    listen: typeof listen;
    client: typeof client;
    decorate: typeof decorate;
};
export { API };
