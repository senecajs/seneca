import Util from 'util';
declare const error: any;
declare function pins(inpin: any): Record<string, any>[];
declare function promiser(context: any, callback?: any): Promise<unknown>;
declare function stringify(...args: any): any;
declare function wrap_error(err: any): void;
declare function make_plugin_key(plugin: any, origtag: any): string;
declare const tagnid: any;
declare function parse_jsonic(str: any, code: any): any;
declare function pattern(patobj: any): any;
declare function pincanon(inpin: any): any;
declare function noop(): void;
declare function clean(obj: any, opts?: any): any;
declare function deep(...argsarr: any): any;
declare const print: any;
declare function each(collect: any, func: any): void | null;
declare function makedie(instance: any, ctxt: any): (this: any, err: any) => void;
declare function make_standard_act_log_entry(actdef: any, msg: any, meta: any, origmsg: any, ctxt: any): any;
declare function make_standard_err_log_entry(err: any, ctxt: any): any;
declare function resolve_option(value: any, options: any): any;
declare function autoincr(): () => number;
declare function inspect(val: any, opts?: any): string;
declare function make_callpoint(active: any): (override: any) => any;
declare function make_trace_desc(meta: any): any[];
declare function msgstr(msg: any, len?: number): string;
declare function jsonic_stringify(val: any, callopts?: any): string;
declare const TRACE_PATTERN = 0;
declare const TRACE_ID = 1;
declare const TRACE_INSTANCE = 2;
declare const TRACE_TAG = 3;
declare const TRACE_VERSION = 4;
declare const TRACE_START = 5;
declare const TRACE_END = 6;
declare const TRACE_SYNC = 7;
declare const TRACE_ACTION = 8;
declare function history(opts: any): ActHistory;
declare class ActHistory {
    _total: number;
    _list: any;
    _map: any;
    _prune_interval: any;
    constructor(opts: any);
    stats(this: any): {
        total: any;
    };
    add(this: any, obj: any): void;
    place(this: any, timelimit: any): any;
    prune(this: any, timelimit: any): void;
    get(this: any, id: any): any;
    list(this: any): any;
    close(this: any): void;
    toString(this: any): string;
    [Util.inspect.custom](this: any): any;
}
export { pins, promiser, stringify, wrap_error, make_plugin_key, parse_jsonic, pattern, pincanon, noop, clean, deep, each, makedie, make_standard_act_log_entry, make_standard_err_log_entry, resolve_option, autoincr, make_callpoint, make_trace_desc, history, print, tagnid, inspect, error, msgstr, jsonic_stringify, TRACE_PATTERN, TRACE_ID, TRACE_INSTANCE, TRACE_TAG, TRACE_VERSION, TRACE_START, TRACE_END, TRACE_SYNC, TRACE_ACTION, };
